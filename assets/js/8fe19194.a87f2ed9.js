"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1706],{2195:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"custom-rules","title":"Custom Rules","description":"Learn how to define custom rules and guidelines for AI agents in Forge","source":"@site/docs/custom-rules.mdx","sourceDirName":".","slug":"/custom-rules","permalink":"/docs/custom-rules","draft":false,"unlisted":false,"editUrl":"https://github.com/Forge Code/antinomyhq.github.io/tree/main/docs/custom-rules.mdx","tags":[],"version":"current","lastUpdatedAt":1743502566000,"sidebarPosition":6,"frontMatter":{"title":"Custom Rules","slug":"/custom-rules","sidebar_position":6,"description":"Learn how to define custom rules and guidelines for AI agents in Forge","sidebar_label":"Custom Rules"},"sidebar":"docs","previous":{"title":"Operating Agents","permalink":"/docs/operating-agents"},"next":{"title":"Plan First, Then Act","permalink":"/docs/plan-and-act-guide"}}');var i=s(4848),r=s(8453);const o={title:"Custom Rules",slug:"/custom-rules",sidebar_position:6,description:"Learn how to define custom rules and guidelines for AI agents in Forge",sidebar_label:"Custom Rules"},l="Custom Rules",a={},c=[{value:"Understanding Custom Rules",id:"understanding-custom-rules",level:2},{value:"Adding Custom Rules",id:"adding-custom-rules",level:2},{value:"Example Use Cases",id:"example-use-cases",level:2},{value:"Coding Standards Enforcement",id:"coding-standards-enforcement",level:3},{value:"Testing Guidelines",id:"testing-guidelines",level:3},{value:"Security Analysis Rules",id:"security-analysis-rules",level:3},{value:"Documentation Guidelines",id:"documentation-guidelines",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Be Specific and Clear",id:"be-specific-and-clear",level:3},{value:"Provide Examples",id:"provide-examples",level:3},{value:"Formatting Requirements",id:"formatting-requirements",level:3},{value:"Linking to External Resources",id:"linking-to-external-resources",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Agent Not Following Rules",id:"agent-not-following-rules",level:3},{value:"Rules Conflicting with System Prompt",id:"rules-conflicting-with-system-prompt",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"custom-rules",children:"Custom Rules"})}),"\n",(0,i.jsx)(n.p,{children:"Custom rules allow you to define specific guidelines and instructions that shape how AI agents behave in Forge. These rules act as specialized knowledge or constraints that influence how agents interpret tasks, generate code, and formulate responses."}),"\n",(0,i.jsx)(n.h2,{id:"understanding-custom-rules",children:"Understanding Custom Rules"}),"\n",(0,i.jsx)(n.p,{children:"Custom rules provide a way to:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Enforce coding standards"})," specific to your organization or project"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Define domain-specific knowledge"})," for specialized tasks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Set procedural guidelines"})," for workflows or decision-making"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Establish response formatting requirements"})," for consistent outputs"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Unlike system prompts which set general behavior, custom rules can be more granular and task-specific."}),"\n",(0,i.jsx)(n.h2,{id:"adding-custom-rules",children:"Adding Custom Rules"}),"\n",(0,i.jsxs)(n.p,{children:["Custom rules are defined in your ",(0,i.jsx)(n.code,{children:"forge.yaml"})," file under each agent's configuration:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"agents:\n  - id: engineer\n    model: anthropic/claude-3.5-sonnet\n    custom_rules: |\n      Code Review Guidelines:\n      - Check for proper error handling in all functions\n      - Ensure consistent code formatting according to project style guide\n      - Verify input validation for all user-provided data\n      - Look for potential security vulnerabilities\n      - Suggest optimizations for performance-critical sections\n      - Ensure proper documentation for public APIs\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"custom_rules"})," field accepts multi-line text that can include:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Markdown-formatted content"}),"\n",(0,i.jsx)(n.li,{children:"Lists and bullet points"}),"\n",(0,i.jsx)(n.li,{children:"Code examples"}),"\n",(0,i.jsx)(n.li,{children:"Step-by-step instructions"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-use-cases",children:"Example Use Cases"}),"\n",(0,i.jsx)(n.h3,{id:"coding-standards-enforcement",children:"Coding Standards Enforcement"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"custom_rules: |\n  Rust Coding Standards:\n\n  - Use `anyhow::Result` for error handling in services and repositories\n  - Create domain errors using `thiserror`\n  - Never implement `From` for converting domain errors, manually convert them\n  - Use `unwrap()` only in test code, never in production code\n  - Follow the Rust API guidelines for public interfaces\n  - Use `#[derive]` macros for common trait implementations\n"})}),"\n",(0,i.jsx)(n.h3,{id:"testing-guidelines",children:"Testing Guidelines"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"custom_rules: |\n  Testing Guidelines:\n\n  - All tests should follow the Arrange-Act-Assert pattern:\n    ```rust\n    fn test_function() {\n        // Arrange: Set up test data\n        let fixture = ...;\n        \n        // Act: Call the function being tested\n        let actual = function_under_test(fixture);\n        \n        // Assert: Verify the results\n        let expected = ...;\n        assert_eq!(actual, expected);\n    }\n    ```\n  - Use descriptive test names that explain what is being tested\n  - Use `pretty_assertions` for better error messages\n  - Create fixtures for complex test data\n  - Test edge cases and failure modes\n"})}),"\n",(0,i.jsx)(n.h3,{id:"security-analysis-rules",children:"Security Analysis Rules"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"custom_rules: |\n  Security Analysis Protocol:\n\n  1. For each user input, verify:\n     - Input validation and sanitization\n     - Protection against injection attacks\n     - Proper error handling without information leakage\n\n  2. For authentication flows, check:\n     - Proper password hashing with strong algorithms\n     - Protection against brute force attempts\n     - Secure session management\n\n  3. Coding patterns to flag:\n     - Hardcoded credentials\n     - Insecure random number generation\n     - Missing access controls\n     - Insecure file operations\n"})}),"\n",(0,i.jsx)(n.h3,{id:"documentation-guidelines",children:"Documentation Guidelines"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"custom_rules: |\n  Documentation Standards:\n\n  - Every public function must have a docstring explaining:\n    - Purpose and functionality\n    - Parameter descriptions\n    - Return value details\n    - Examples of usage\n    - Any exceptions/errors that might be thrown\n\n  - READMEs must include:\n    - Project overview\n    - Installation instructions\n    - Basic usage examples\n    - Contributing guidelines\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"be-specific-and-clear",children:"Be Specific and Clear"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# \u274c Too vague\ncustom_rules: |\n  Write good code.\n\n# \u2705 Clear and specific\ncustom_rules: |\n  Code Quality Guidelines:\n  - Functions should do one thing and have a clear purpose\n  - Variable names should be descriptive of their content\n  - Comments should explain "why", not "what" the code does\n  - Functions should not exceed 30 lines where possible\n'})}),"\n",(0,i.jsx)(n.h3,{id:"provide-examples",children:"Provide Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"custom_rules: |\n  Error Handling Pattern:\n\n  Always use this pattern for error handling:\n\n  ```typescript\n  try {\n    // Operation that might fail\n  } catch (error) {\n    if (error instanceof KnownError) {\n      // Handle specific error\n    } else {\n      // Log and propagate unexpected errors\n      logger.error('Unexpected error:', error);\n      throw error;\n    }\n  }\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\n### Prioritize Important Rules\n\nPut the most important rules at the beginning of your custom rules section, as they'll have more influence on the agent's behavior.\n\n### Keep Rules Concise\n\nWhile comprehensive guidelines are valuable, excessively long rules might dilute their effectiveness. Focus on the most important guidelines for your specific use case.\n\n## Advanced Techniques\n\n### Conditional Rules\n\nYou can include conditional logic in your custom rules:\n\n```yaml\ncustom_rules: |\n  Performance Rules:\n\n  For server-side code:\n  - Minimize database queries\n  - Use connection pooling\n  - Implement caching for frequently accessed data\n\n  For client-side code:\n  - Optimize bundle size\n  - Minimize DOM manipulations\n  - Implement lazy loading for heavy components\n"})}),"\n",(0,i.jsx)(n.h3,{id:"formatting-requirements",children:"Formatting Requirements"}),"\n",(0,i.jsx)(n.p,{children:"You can specify exact formatting requirements for code or other outputs:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"custom_rules: |\n  Commit Message Format:\n\n  All commit messages must follow this format:\n"})}),"\n",(0,i.jsx)(n.p,{children:"type(scope): subject"}),"\n",(0,i.jsx)(n.p,{children:"body"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\nWhere:\n- type: feat, fix, docs, style, refactor, test, or chore\n- scope: component affected (optional)\n- subject: short description in present tense, no capitalization\n- body: detailed explanation if needed\n"})}),"\n",(0,i.jsx)(n.h3,{id:"linking-to-external-resources",children:"Linking to External Resources"}),"\n",(0,i.jsx)(n.p,{children:"You can reference external documentation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"custom_rules: |\n  Follow the Google TypeScript Style Guide: https://google.github.io/styleguide/tsguide.html\n\n  Key points to emphasize:\n  - Use `interface` for public APIs, `type` for complex types\n  - Prefer readonly properties over ones that will be mutated\n  - Use ECMAScript module imports with the `import {x} from 'y'` syntax\n"})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"agent-not-following-rules",children:"Agent Not Following Rules"}),"\n",(0,i.jsx)(n.p,{children:"If the agent isn't following your custom rules:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Make rules more explicit"}),": Break down complex guidelines into clear, specific instructions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Add examples"}),": Include concrete examples demonstrating the desired behavior"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prioritize"}),": Put the most important rules at the beginning"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simplify"}),": If you have too many rules, focus on the critical ones"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Update system prompt"}),": Ensure your system prompt instructs the agent to follow the custom rules"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"rules-conflicting-with-system-prompt",children:"Rules Conflicting with System Prompt"}),"\n",(0,i.jsx)(n.p,{children:"If custom rules conflict with the system prompt:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Align content"}),": Ensure system prompts and custom rules have consistent guidelines"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Specify precedence"}),": Clarify which guidelines take priority in case of conflicts"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consolidate"}),": Consider moving some guidelines between system prompts and custom rules"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var t=s(6540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);