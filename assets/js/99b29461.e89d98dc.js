"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9693],{3624:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"custom-commands","title":"Custom Commands","description":"Create and configure your own custom commands in Forge to streamline workflows","source":"@site/docs/custom-commands.mdx","sourceDirName":".","slug":"/custom-commands","permalink":"/docs/custom-commands","draft":false,"unlisted":false,"editUrl":"https://github.com/antinomyhq/antinomyhq.github.io/tree/main/docs/custom-commands.mdx","tags":[],"version":"current","lastUpdatedAt":1743502566000,"sidebarPosition":3,"frontMatter":{"title":"Custom Commands","slug":"/custom-commands","sidebar_position":3,"description":"Create and configure your own custom commands in Forge to streamline workflows","sidebar_label":"Custom Commands"},"sidebar":"docs","previous":{"title":"Context Compaction","permalink":"/docs/context-compaction"},"next":{"title":"Custom Workflows","permalink":"/docs/custom-workflows"}}');var t=s(4848),i=s(8453);const a={title:"Custom Commands",slug:"/custom-commands",sidebar_position:3,description:"Create and configure your own custom commands in Forge to streamline workflows",sidebar_label:"Custom Commands"},c="Custom Commands",r={},d=[{value:"What Are Custom Commands?",id:"what-are-custom-commands",level:2},{value:"Configuring Custom Commands",id:"configuring-custom-commands",level:2},{value:"Configuration Options",id:"configuration-options",level:3},{value:"Using Custom Commands",id:"using-custom-commands",level:2},{value:"Basic Command Execution",id:"basic-command-execution",level:3},{value:"Command with Arguments",id:"command-with-arguments",level:3},{value:"How Custom Commands Work",id:"how-custom-commands-work",level:2},{value:"Agent Configuration for Custom Commands",id:"agent-configuration-for-custom-commands",level:2},{value:"Command Handling Approaches",id:"command-handling-approaches",level:2},{value:"1. Using Event Value as Instructions",id:"1-using-event-value-as-instructions",level:3},{value:"2. Using Event Value as Data in a Template",id:"2-using-event-value-as-data-in-a-template",level:3},{value:"Example Custom Commands",id:"example-custom-commands",level:2},{value:"Git Workflow Commands",id:"git-workflow-commands",level:3},{value:"Development Workflow Commands",id:"development-workflow-commands",level:3},{value:"Project-Specific Commands",id:"project-specific-commands",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Related Documentation",id:"related-documentation",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"custom-commands",children:"Custom Commands"})}),"\n",(0,t.jsxs)(n.p,{children:["Forge allows you to define and use custom commands that extend its functionality and streamline your workflow. These commands can be executed within the Forge CLI using the ",(0,t.jsx)(n.code,{children:"/command_name"})," syntax and are configured in your ",(0,t.jsx)(n.code,{children:"forge.yaml"})," file."]}),"\n",(0,t.jsx)(n.h2,{id:"what-are-custom-commands",children:"What Are Custom Commands?"}),"\n",(0,t.jsx)(n.p,{children:"Custom commands are user-defined shortcuts that trigger specific actions or workflows. They enable you to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Create project-specific automation"}),"\n",(0,t.jsx)(n.li,{children:"Standardize common workflows across your team"}),"\n",(0,t.jsx)(n.li,{children:"Simplify complex operations into single commands"}),"\n",(0,t.jsx)(n.li,{children:"Integrate Forge with your development processes"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"configuring-custom-commands",children:"Configuring Custom Commands"}),"\n",(0,t.jsxs)(n.p,{children:["Custom commands are defined in the ",(0,t.jsx)(n.code,{children:"commands"})," section of your ",(0,t.jsx)(n.code,{children:"forge.yaml"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"commands:\n  - name: commit\n    description: Commit changes with a standard prefix\n    value: |\n      Understand the diff produced and commit using the 'conventional commit' standard\n\n  - name: branch\n    description: Create and checkout a new branch\n\n  - name: pull-request\n    description: Create a pull request with standard template\n    value: |\n      Understand the diff with respect to `main` and create a pull-request.\n      Ensure it follows 'conventional commit' standard.\n"})}),"\n",(0,t.jsx)(n.h3,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Option"}),(0,t.jsx)(n.th,{children:"Required"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"name"})}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsxs)(n.td,{children:["The name of the command (used as ",(0,t.jsx)(n.code,{children:"/name"})," in the CLI)"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"description"})}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"A description of what the command does (shown in help)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"value"})}),(0,t.jsx)(n.td,{children:"No"}),(0,t.jsx)(n.td,{children:"Default prompt value used when no arguments are provided"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"using-custom-commands",children:"Using Custom Commands"}),"\n",(0,t.jsx)(n.p,{children:"Once configured, you can use custom commands in the Forge CLI in two ways:"}),"\n",(0,t.jsx)(n.h3,{id:"basic-command-execution",children:"Basic Command Execution"}),"\n",(0,t.jsx)(n.p,{children:"To execute a command with its default value (if provided):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"/commit\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This executes the ",(0,t.jsx)(n.code,{children:"commit"})," command with the default instructions defined in its ",(0,t.jsx)(n.code,{children:"value"})," field."]}),"\n",(0,t.jsx)(n.h3,{id:"command-with-arguments",children:"Command with Arguments"}),"\n",(0,t.jsx)(n.p,{children:"To override the default value or provide instructions for commands without a default:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"/commit Create a detailed commit message for the login feature\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"/branch feature/new-auth\n"})}),"\n",(0,t.jsx)(n.h2,{id:"how-custom-commands-work",children:"How Custom Commands Work"}),"\n",(0,t.jsx)(n.p,{children:"When a custom command is executed, it follows this event flow:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Command Execution"}),": User types a command like ",(0,t.jsx)(n.code,{children:"/commit feat: add user authentication"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Event Dispatch"}),": Forge dispatches an event with:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Name"}),": The command name (e.g., ",(0,t.jsx)(n.code,{children:"commit"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Value"}),": The provided argument or default value (e.g., ",(0,t.jsx)(n.code,{children:"feat: add user authentication"}),")"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Agent Subscription"}),": Any agent that has subscribed to this event name receives the event"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Event Processing"}),": The agent processes the event according to its configuration"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"agent-configuration-for-custom-commands",children:"Agent Configuration for Custom Commands"}),"\n",(0,t.jsx)(n.p,{children:"For an agent to respond to a custom command, it must explicitly subscribe to the event with the same name as the command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"agents:\n  - id: git-commit\n    model: anthropic/claude-3.7-sonnet\n    system_prompt: \"{{> system-prompt-git-commit.hbs }}\"\n    tools:\n      - tool_forge_process_shell\n    subscribe:\n      - commit # This agent subscribes to the 'commit' custom command\n"})}),"\n",(0,t.jsx)(n.h2,{id:"command-handling-approaches",children:"Command Handling Approaches"}),"\n",(0,t.jsx)(n.p,{children:"There are two main approaches for handling custom command events in agents:"}),"\n",(0,t.jsx)(n.h3,{id:"1-using-event-value-as-instructions",children:"1. Using Event Value as Instructions"}),"\n",(0,t.jsx)(n.p,{children:"Pass the event value directly to the agent as complete instructions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'commands:\n  - name: commit\n    description: Commit changes with a standard prefix\n    value: |\n      Understand the diff and commit using the \'conventional commit\' standard\n\nagents:\n  - id: git-commit\n    model: anthropic/claude-3.7-sonnet\n    system_prompt: "{{> system-prompt-git-commit.hbs }}"\n    user_prompt: "{{event.value}}"\n    tools:\n      - tool_forge_process_shell\n    subscribe:\n      - commit\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-using-event-value-as-data-in-a-template",children:"2. Using Event Value as Data in a Template"}),"\n",(0,t.jsx)(n.p,{children:"Incorporate the event value into a structured template:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'commands:\n  - name: summarize\n    description: Summarize a file with specific focus\n\nagents:\n  - id: summarizer\n    model: anthropic/claude-3.7-sonnet\n    system_prompt: "{{> system-prompt-summarizer.hbs }}"\n    user_prompt: |\n      <task>Summarize the following file in detail</task>\n      <focus>{{event.value}}</focus>\n      <mode>PLAN</mode>\n    tools:\n      - tool_forge_fs_read\n    subscribe:\n      - summarize\n'})}),"\n",(0,t.jsx)(n.h2,{id:"example-custom-commands",children:"Example Custom Commands"}),"\n",(0,t.jsx)(n.h3,{id:"git-workflow-commands",children:"Git Workflow Commands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"commands:\n  - name: commit\n    description: Commit changes with a standard prefix\n    value: |\n      Analyze changes and create a commit message following conventional commit format\n\n  - name: branch\n    description: Create and checkout a new branch from the current changes\n\n  - name: pr\n    description: Create a pull request for current branch\n    value: |\n      Create a detailed pull request description based on the changes in this branch\n"})}),"\n",(0,t.jsx)(n.h3,{id:"development-workflow-commands",children:"Development Workflow Commands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"commands:\n  - name: review\n    description: Review code for bugs and improvements\n    value: |\n      Review the code for bugs, security issues, performance problems, and suggest improvements\n\n  - name: document\n    description: Generate documentation for a file\n\n  - name: test\n    description: Generate unit tests for a file or function\n    value: |\n      Create comprehensive unit tests with good coverage for the specified code\n"})}),"\n",(0,t.jsx)(n.h3,{id:"project-specific-commands",children:"Project-Specific Commands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"commands:\n  - name: fixme\n    description: Looks for all the fixme comments in the code and attempts to fix them\n    value: |\n      Find all the FIXME comments in source-code files and attempt to fix them.\n\n  - name: deploy\n    description: Prepare deployment package and update version numbers\n    value: |\n      Update version numbers and prepare the project for deployment\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Descriptive Names"}),": Use clear, action-oriented names for commands"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Helpful Descriptions"}),": Write descriptions that explain both the purpose and expected outcome"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Default Values"}),": Provide default values for commands that can work without specific arguments"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Specialized Agents"}),": Configure agents specifically for handling particular commands"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Command Organization"}),": Group related commands in your configuration for easier management"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation"}),": Document custom commands for your team in a project README"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../custom-workflows",children:"Custom Workflows"})," - Learn how to create sophisticated workflows with multiple agents"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../agent-configuration",children:"Agent Configuration"})," - Configure agents to respond to custom commands"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../commands",children:"Commands"})," - Learn about Forge's built-in commands"]}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var o=s(6540);const t={},i=o.createContext(t);function a(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);