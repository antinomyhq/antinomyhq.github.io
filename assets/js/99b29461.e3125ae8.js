"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9693],{3624:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>l,frontMatter:()=>r,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"custom-commands","title":"Custom Commands","description":"Create and configure your own custom commands in Forge to streamline workflows","source":"@site/docs/custom-commands.mdx","sourceDirName":".","slug":"/custom-commands","permalink":"/docs/custom-commands","draft":false,"unlisted":false,"editUrl":"https://github.com/Forge Code/antinomyhq.github.io/tree/main/docs/custom-commands.mdx","tags":[],"version":"current","lastUpdatedAt":1761626503000,"sidebarPosition":3,"frontMatter":{"title":"Custom Commands","slug":"/custom-commands","sidebar_position":3,"description":"Create and configure your own custom commands in Forge to streamline workflows","sidebar_label":"Custom Commands"},"sidebar":"docs","previous":{"title":"Context Compaction","permalink":"/docs/context-compaction"},"next":{"title":"Security Features","permalink":"/docs/security-features"}}');var i=s(4848),t=s(8453);const r={title:"Custom Commands",slug:"/custom-commands",sidebar_position:3,description:"Create and configure your own custom commands in Forge to streamline workflows",sidebar_label:"Custom Commands"},d="Custom Commands",c={},a=[{value:"What Are Custom Commands?",id:"what-are-custom-commands",level:2},{value:"Defining Custom Commands",id:"defining-custom-commands",level:2},{value:"Command File Structure",id:"command-file-structure",level:3},{value:"File Format",id:"file-format",level:3},{value:"Configuration Options",id:"configuration-options",level:3},{value:"Using Custom Commands",id:"using-custom-commands",level:2},{value:"Basic Command Execution",id:"basic-command-execution",level:3},{value:"Command with Arguments",id:"command-with-arguments",level:3},{value:"How Custom Commands Work",id:"how-custom-commands-work",level:2},{value:"Agent Configuration for Custom Commands",id:"agent-configuration-for-custom-commands",level:2},{value:"Command Handling Approaches",id:"command-handling-approaches",level:2},{value:"1. Using Event Value as Instructions",id:"1-using-event-value-as-instructions",level:3},{value:"2. Using Event Value as Data in a Template",id:"2-using-event-value-as-data-in-a-template",level:3},{value:"Development Workflow Commands",id:"development-workflow-commands",level:3},{value:"Project-Specific Commands",id:"project-specific-commands",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Migrating from forge.yaml",id:"migrating-from-forgeyaml",level:2},{value:"Migration Steps",id:"migration-steps",level:3},{value:"Example Migration",id:"example-migration",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function m(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"custom-commands",children:"Custom Commands"})}),"\n",(0,i.jsxs)(n.p,{children:["Forge allows you to define and use custom commands that extend its functionality and streamline your workflow. These commands can be executed within the Forge CLI using the ",(0,i.jsx)(n.code,{children:"/command_name"})," syntax and are defined as individual files in the ",(0,i.jsx)(n.code,{children:"~/forge/commands/"})," directory."]}),"\n",(0,i.jsx)(n.h2,{id:"what-are-custom-commands",children:"What Are Custom Commands?"}),"\n",(0,i.jsx)(n.p,{children:"Custom commands are user-defined shortcuts that trigger specific actions or workflows. They enable you to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Create project-specific automation"}),"\n",(0,i.jsx)(n.li,{children:"Standardize common workflows across your team"}),"\n",(0,i.jsx)(n.li,{children:"Simplify complex operations into single commands"}),"\n",(0,i.jsx)(n.li,{children:"Integrate Forge with your development processes"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"defining-custom-commands",children:"Defining Custom Commands"}),"\n",(0,i.jsxs)(n.p,{children:["Custom commands are defined as individual Markdown files in the ",(0,i.jsx)(n.code,{children:"~/forge/commands/"})," directory. Each command file follows the naming convention ",(0,i.jsx)(n.code,{children:"command-name.md"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"command-file-structure",children:"Command File Structure"}),"\n",(0,i.jsxs)(n.p,{children:["Create a Markdown file in ",(0,i.jsx)(n.code,{children:"~/forge/commands/"})," with frontmatter containing metadata and the body containing the prompt:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"~/forge/commands/commit.md"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"---\nname: commit\ndescription: Commit changes with a standard prefix\n---\n\nUnderstand the diff produced and commit using the 'conventional commit' standard\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"~/forge/commands/branch.md"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"---\nname: branch\ndescription: Create and checkout a new branch\n---\n\nCreate a new branch based on the current changes and checkout to it\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"~/forge/commands/check.md"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"---\nname: check\ndescription: Checks if the code is ready to be committed\n---\n\n- Run the `lint` and `test` commands and verify if everything is fine.\n  <lint>npm run lint</lint>\n  <test>npm test</test>\n- Fix every issue found in the process\n"})}),"\n",(0,i.jsx)(n.h3,{id:"file-format",children:"File Format"}),"\n",(0,i.jsx)(n.p,{children:"Command files use Markdown with YAML frontmatter:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Frontmatter"}),": Contains ",(0,i.jsx)(n.code,{children:"name"})," and ",(0,i.jsx)(n.code,{children:"description"})," fields enclosed in ",(0,i.jsx)(n.code,{children:"---"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Body"}),": The content after frontmatter becomes the default prompt for the command"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Option"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Location"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"name"})}),(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:"Frontmatter"}),(0,i.jsxs)(n.td,{children:["The name of the command (used as ",(0,i.jsx)(n.code,{children:"/name"})," in the CLI)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"description"})}),(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:"Frontmatter"}),(0,i.jsx)(n.td,{children:"A description of what the command does (shown in help)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"prompt"}),(0,i.jsx)(n.td,{children:"No"}),(0,i.jsx)(n.td,{children:"Body"}),(0,i.jsx)(n.td,{children:"Default prompt value used when no arguments are provided"})]})]})]}),"\n",(0,i.jsx)(n.admonition,{title:"Deprecated: Commands in forge.yaml",type:"warning",children:(0,i.jsxs)(n.p,{children:["Defining commands in the ",(0,i.jsx)(n.code,{children:"commands"})," section of ",(0,i.jsx)(n.code,{children:"forge.yaml"})," is ",(0,i.jsx)(n.strong,{children:"deprecated"})," and no longer supported. Please migrate your commands to individual Markdown files in the ",(0,i.jsx)(n.code,{children:"~/forge/commands/"})," directory."]})}),"\n",(0,i.jsx)(n.h2,{id:"using-custom-commands",children:"Using Custom Commands"}),"\n",(0,i.jsx)(n.p,{children:"Once configured, you can use custom commands in the Forge CLI in two ways:"}),"\n",(0,i.jsx)(n.h3,{id:"basic-command-execution",children:"Basic Command Execution"}),"\n",(0,i.jsx)(n.p,{children:"To execute a command with its default value (if provided):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"/commit\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This executes the ",(0,i.jsx)(n.code,{children:"commit"})," command with the default instructions defined in its ",(0,i.jsx)(n.code,{children:"value"})," field."]}),"\n",(0,i.jsx)(n.h3,{id:"command-with-arguments",children:"Command with Arguments"}),"\n",(0,i.jsx)(n.p,{children:"To override the default value or provide instructions for commands without a default:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"/commit Create a detailed commit message for the login feature\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"/branch feature/new-auth\n"})}),"\n",(0,i.jsx)(n.h2,{id:"how-custom-commands-work",children:"How Custom Commands Work"}),"\n",(0,i.jsx)(n.p,{children:"When a custom command is executed, it follows this event flow:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Command Execution"}),": User types a command like ",(0,i.jsx)(n.code,{children:"/commit feat: add user authentication"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event Dispatch"}),": Forge dispatches an event with:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Name"}),": The command name (e.g., ",(0,i.jsx)(n.code,{children:"commit"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Value"}),": The provided argument or default value (e.g., ",(0,i.jsx)(n.code,{children:"feat: add user authentication"}),")"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Agent Subscription"}),": Any agent that has subscribed to this event name receives the event"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event Processing"}),": The agent processes the event according to its configuration"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"agent-configuration-for-custom-commands",children:"Agent Configuration for Custom Commands"}),"\n",(0,i.jsx)(n.p,{children:"For an agent to respond to a custom command, it must explicitly subscribe to the event with the same name as the command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"agents:\n  - id: git-commit\n    model: anthropic/claude-3.7-sonnet\n    system_prompt: \"{{> system-prompt-git-commit.hbs }}\"\n    tools:\n      - forge_tool_process_shell\n    subscribe:\n      - commit # This agent subscribes to the 'commit' custom command\n"})}),"\n",(0,i.jsx)(n.h2,{id:"command-handling-approaches",children:"Command Handling Approaches"}),"\n",(0,i.jsx)(n.p,{children:"There are two main approaches for handling custom command events in agents:"}),"\n",(0,i.jsx)(n.h3,{id:"1-using-event-value-as-instructions",children:"1. Using Event Value as Instructions"}),"\n",(0,i.jsx)(n.p,{children:"Pass the event value directly to the agent as complete instructions:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"~/forge/commands/commit.md"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"---\nname: commit\ndescription: Commit changes with a standard prefix\n---\n\nUnderstand the diff and commit using the 'conventional commit' standard\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-using-event-value-as-data-in-a-template",children:"2. Using Event Value as Data in a Template"}),"\n",(0,i.jsx)(n.p,{children:"Incorporate the event value into a structured template:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"~/forge/commands/analyze.md"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"---\nname: analyze\ndescription: Analyze a file with specific focus\n---\n\nPerform a detailed analysis of the specified file\n\n## Example Custom Commands\n\n### Git Workflow Commands\n\n**`~/forge/commands/commit.md`**\n\n```markdown\n---\nname: commit\ndescription: Commit changes with a standard prefix\n---\n\nAnalyze changes and create a commit message following conventional commit format\n```\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"~/forge/commands/branch.md"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"---\nname: branch\ndescription: Create and checkout a new branch from the current changes\n---\n\nCreate a new branch based on the context and checkout to it\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"~/forge/commands/pr.md"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"---\nname: pr\ndescription: Create a pull request for current branch\n---\n\nCreate a detailed pull request description based on the changes in this branch\n"})}),"\n",(0,i.jsx)(n.h3,{id:"development-workflow-commands",children:"Development Workflow Commands"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"~/forge/commands/review.md"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"---\nname: review\ndescription: Review code for bugs and improvements\n---\n\nReview the code for bugs, security issues, performance problems, and suggest improvements\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"~/forge/commands/document.md"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"---\nname: document\ndescription: Generate documentation for a file\n---\n\nGenerate comprehensive documentation for the specified code\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"~/forge/commands/test.md"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"---\nname: test\ndescription: Generate unit tests for a file or function\n---\n\nCreate comprehensive unit tests with good coverage for the specified code\n"})}),"\n",(0,i.jsx)(n.h3,{id:"project-specific-commands",children:"Project-Specific Commands"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"~/forge/commands/fixme.md"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"---\nname: fixme\ndescription: Looks for all the fixme comments in the code and attempts to fix them\n---\n\nFind all the FIXME comments in source-code files and attempt to fix them.\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"~/forge/commands/deploy.md"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"---\nname: deploy\ndescription: Prepare deployment package and update version numbers\n---\n\nUpdate version numbers and prepare the project for deployment\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Descriptive Names"}),": Use clear, action-oriented names for commands (use lowercase with hyphens for multi-word commands)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Helpful Descriptions"}),": Write descriptions that explain both the purpose and expected outcome"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Default Prompts"}),": Provide default prompts for commands that can work without specific arguments"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Specialized Agents"}),": Configure agents specifically for handling particular commands in ",(0,i.jsx)(n.code,{children:"~/forge/agents/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File Organization"}),": Keep command files organized in ",(0,i.jsx)(n.code,{children:"~/forge/commands/"})," with descriptive filenames"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Documentation"}),": Document custom commands for your team in a project README"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"migrating-from-forgeyaml",children:"Migrating from forge.yaml"}),"\n",(0,i.jsxs)(n.p,{children:["If you have commands defined in your ",(0,i.jsx)(n.code,{children:"forge.yaml"})," file, migrate them to individual Markdown files:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Old format (deprecated):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# forge.yaml\ncommands:\n  - name: commit\n    description: Commit changes\n    prompt: |\n      Create a commit message\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"New format:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"# ~/forge/commands/commit.md\n\n---\n\nname: commit\ndescription: Commit changes\n\n---\n\nCreate a commit message\n"})}),"\n",(0,i.jsx)(n.h3,{id:"migration-steps",children:"Migration Steps"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Create the ",(0,i.jsx)(n.code,{children:"~/forge/commands/"})," directory if it doesn't exist:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mkdir -p ~/forge/commands\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["For each command in your ",(0,i.jsx)(n.code,{children:"forge.yaml"}),", create a Markdown file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Example: converting a commit command\ntouch ~/forge/commands/commit.md\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Add the frontmatter with ",(0,i.jsx)(n.code,{children:"name"})," and ",(0,i.jsx)(n.code,{children:"description"})," fields"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Add the prompt as the body content (without ",(0,i.jsx)(n.code,{children:"prompt:"})," prefix)"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Remove the ",(0,i.jsx)(n.code,{children:"commands"})," section from your ",(0,i.jsx)(n.code,{children:"forge.yaml"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Restart Forge to load the new command definitions"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-migration",children:"Example Migration"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Before (forge.yaml):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"commands:\n  - name: check\n    description: Checks if the code is ready\n    prompt: |\n      Run linting and tests\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"After (~/forge/commands/check.md):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"---\nname: check\ndescription: Checks if the code is ready\n---\n\nRun linting and tests\n"})}),"\n",(0,i.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../custom-workflows",children:"Custom Workflows"})," - Learn how to create sophisticated workflows with multiple agents"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../agent-configuration",children:"Agent Configuration"})," - Configure agents to respond to custom commands"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../commands",children:"Commands"})," - Learn about Forge's built-in commands"]}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>d});var o=s(6540);const i={},t=o.createContext(i);function r(e){const n=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);